package com.matariky.userservice.mapper;

import com.baomidou.mybatisplus.core.conditions.Wrapper;
import com.baomidou.mybatisplus.core.toolkit.Constants;
import com.github.pagehelper.Page;
import com.matariky.mybatis.EnhanceBaseMapper;
import com.matariky.userservice.bean.TreeModel;
import com.matariky.userservice.bean.User;
import org.apache.ibatis.annotations.*;

import java.io.Serializable;
import java.util.Collection;
import java.util.List;
import java.util.Map;

public interface UserMapper extends EnhanceBaseMapper<User> {

	 
	public Page<User> getUserAll(@Param("params") Map<String, Object> map);


	 
	public int getUserAllCount(@Param("params") Map<String, Object> map);

	 
	public int createUser(User bean);
	 
	public int updateUser(@Param("params") User bean);
	 
	public int delUserById(int id);
	 
	public User getUserById(Long id);


    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_user
     *
     * @mbggenerated Wed Dec 09 11:51:39 CST 2020
     */
    int deleteByPrimaryKey(Long id);


    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_user
     *
     * @mbggenerated Wed Dec 09 11:51:39 CST 2020
     */
    int insertSelective(User record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_user
     *
     * @mbggenerated Wed Dec 09 11:51:39 CST 2020
     */
    User selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_user
     *
     * @mbggenerated Wed Dec 09 11:51:39 CST 2020
     */
    int updateByPrimaryKeySelective(User record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_user
     *
     * @mbggenerated Wed Dec 09 11:51:39 CST 2020
     */
    int updateByPrimaryKey(User record);

    User selectByName( String userName);

    List<User> searchByUserNamePrefix(@Param("tenantId") String tenantId,@Param("userNamePrefix") String userNamePrefix);

    	@Override
	int insert(User entity);


	@Override
    int deleteById(Serializable id);


	 @Override
    int deleteByMap(@Param(Constants.COLUMN_MAP) Map<String, Object> columnMap);


	 @Override
    int delete(@Param(Constants.WRAPPER) Wrapper<User> queryWrapper);

     @Override
    int deleteBatchIds(@Param(Constants.COLLECTION) Collection<? extends Serializable> idList);


	 @Override
    int updateById(@Param(Constants.ENTITY) User entity);


	 @Override
    int update(@Param(Constants.ENTITY) User entity, @Param(Constants.WRAPPER) Wrapper<User> updateWrapper);


	 @Override
    User selectById(Serializable id);


	 @Override
    List<User> selectBatchIds(@Param(Constants.COLLECTION) Collection<? extends Serializable> idList);


	 @Override
    List<User> selectByMap(@Param(Constants.COLUMN_MAP) Map<String, Object> columnMap);


	 @Override
    User selectOne(@Param(Constants.WRAPPER) Wrapper<User> queryWrapper);


	 @Override
    Long selectCount(@Param(Constants.WRAPPER) Wrapper<User> queryWrapper);


	 @Override
    List<User> selectList(@Param(Constants.WRAPPER) Wrapper<User> queryWrapper);


	@Override
    List<Map<String, Object>> selectMaps(@Param(Constants.WRAPPER) Wrapper<User> queryWrapper);


	 @Override
    List<Object> selectObjs(@Param(Constants.WRAPPER) Wrapper<User> queryWrapper);


    Page<User> selectPage(Page<User> page, @Param(Constants.WRAPPER) Wrapper<User> queryWrapper);

    Page<Map<String, Object>> selectMapsPage(Page<User> page, @Param(Constants.WRAPPER) Wrapper<User> queryWrapper);

	public void deleteGroupByUserIds(Long[] userId);


	public void saveRGroupUser(@Param("userId")Long userId,@Param("groupId")Long groupId);

	void deleteRoleByUserIds(Long[] userIds);

	public void saveRRoleUser(@Param("userId")Long userId,@Param("roleId")Long roleId);

	void deleteOrganizationByUserIds(Long[] userIds);

	void deleteTenantAndOrganizationByUserIds(Long[] userIds);

	public void saveTenantAndOrganization(Map<String, Object> map);

	public List<Long> getRoleIdList(Long id);

	public List<Long> getGroupIdList(Long id);

	public void updateDeleteTimeById(@Param("array")String[] id) ;

	public List<Map<String, Object>> getApplicationByUser(@Param("user_id")Long id,@Param("tenant_id") Serializable tenantId);


	public List<TreeModel> getPermissionByUser(@Param("user_id")Long id, @Param("tenant_id")String tenantId, @Param("application_id")Long applicationId);

	public List<TreeModel> getPermissionByUserAndRoleAndGroup(@Param("user_id")Long id, @Param("tenant_id")String tenantId, @Param("application_id")Long applicationId);


	public int getCountByOrganizationId(@Param("organizationIds")Long[] organizationIds,@Param("tenant_id")String tenantId);


	public List<Map<String, Object>> getUserAllWithRoleAndGroup(@Param("params") Map<String, Object> map);

	//插入  User  Tenant 中间表(也是和组织机构中间表)
    public int createUserAndTenantAndOrganization(@Param("params") Map<String, Object> map);

    @Insert("insert into user_r_user_tenant values (#{userId}, #{tenantCode},#{organizationId},#{organizationCode},#{isAdmin},#{tenantId},#{selfOrganizationCode},#{theme})")
	public Boolean insertUserTenantRelation(@Param("userId") Long userId, @Param("tenantCode") String tenantCode,
											@Param("organizationId") Long organizationId, @Param("organizationCode") String organizationCode,
											@Param("isAdmin") boolean isAdmin, @Param("tenantId") Long tenantId,
											@Param("selfOrganizationCode") String selfOrganizationCode,@Param("theme")String theme);


	public void updatePassword(@Param("userId")Long userId,@Param("newPassword")String newPassword);


	public List<Map<String, Object>> getUserAllWithRoleAndGroupByIds(@Param("ids") Long[] lids);


	@Update ("update user_user set self_organization_code=#{self_organization_code} where id=#{id}")
	public void updateSelfOrganizationCodeById(@Param("id")Long id,@Param("self_organization_code")String self_organization_code);

	@Delete("delete from user_r_user_tenant where user_id=#{userId} and tenant_code=#{tenantCode} and is_admin=#{isAdmin}")
	public void deleteUserTenantRelation(@Param("userId") Long userId,@Param("tenantCode") String tenantCode,@Param("isAdmin") int isAdmin);

	@Select("SELECT DISTINCT r.permission_id FROM user_r_user_permission r, user_permission p WHERE r.permission_id=p.id and p.delete_time=0 and p.is_active=1 and r.user_id=#{userId}")
	public List<Long> getPermissionIdByUserIdR(Long userId);

	@Select("select count(*) from user_r_user_tenant where is_admin=1 and user_id=#{userId}")
	public Integer isAdmin(Long userId);

	@Select("select uu.login_name as username, uu.email, uu.gender, group_concat(role_name) as roles from user_user uu, user_role ur , user_r_user_role urur where uu.id=urur.user_id and ur.id=urur.role_id and uu.delete_time=0 and uu.is_active=1 and ur.delete_time=0 and ur.role_name like '%IOT%' group by uu.id ")
	public List<Map> getIOTUsers(@Param("tenantId") String tenantId);


	@Select("select count(1) from user_user uu, user_role ur, user_r_user_role urur where uu.id=#{userId} and uu.id=urur.user_id and ur.id=urur.role_id and uu.delete_time=0 and uu.is_active=1 and ur.delete_time=0 and ur.role_name like '%IOT%' ")
	public Integer isIOTUser(@Param("userId")Long id);


	@Select(" select r.role_name from user_r_user_role rur, user_role r where rur.user_id = #{value}  and r.id=rur.role_id")
	public List<String> getRoleNameList(@Param("value") Long id);

	@Select("select g.group_name from user_r_group_user rug, user_group g where rug.user_id = #{value} and g.id=rug.group_id")
	public List<String> getGourpNameList(@Param("value") Long id);

	@Select ("select a.application_name from user_r_user_application rua, user_application a where rua.user_id=#{userId} and rua.application_id=a.id")
	public List<String> getApplicationNameList(@Param("userId") Long id);

}

