package com.matariky.userservice.mapper;

import java.io.Serializable;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.matariky.userservice.dto.PermissionInfoVO;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Select;

import com.baomidou.mybatisplus.core.conditions.Wrapper;
import com.baomidou.mybatisplus.core.mapper.BaseMapper;
import com.baomidou.mybatisplus.core.toolkit.Constants;
import com.github.pagehelper.Page;

import com.matariky.userservice.bean.Permission;
import com.matariky.userservice.bean.TreeModel;
import com.matariky.userservice.dto.PermissionDTO;

public interface PermissionMapper extends BaseMapper<Permission>{
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_permission
     *
     * @mbggenerated Wed Dec 09 11:28:38 CST 2020
     */
    int deleteByPrimaryKey(Long id);


    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_permission
     *
     * @mbggenerated Wed Dec 09 11:28:38 CST 2020
     */
    int insertSelective(Permission record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_permission
     *
     * @mbggenerated Wed Dec 09 11:28:38 CST 2020
     */
    Permission selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_permission
     *
     * @mbggenerated Wed Dec 09 11:28:38 CST 2020
     */
    int updateByPrimaryKeySelective(Permission record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_permission
     *
     * @mbggenerated Wed Dec 09 11:28:38 CST 2020
     */
    int updateByPrimaryKey(Permission record);

    @Select("select  p.id, p.parent_id as parentId, p.resource_type as resourceType, p.permission_name as permissionName, p.url ,p.sort_order as sortOrder, p.access_type as accessType, p.icon, p.resource_attribute as resourceAttribute, p.orig_id as origId from user_user u, user_r_user_permission ur, user_permission p, user_r_application_permission rap where u.id=#{userId} and u.id=ur.user_id and p.id=ur.permission_id and p.tenant_id =#{tenantId} and u.tenant_id=#{tenantId} and p.id =rap.permission_id and rap.application_id=#{applicationId} and p.is_active=1 and u.delete_time=0 and p.delete_time=0")
    List<Permission> getDirectlyAssignedPermissionIdsByUserId(@Param("userId") Long userId, @Param("tenantId") String tenantId, @Param("applicationId")Long applicationId);

    @Select("select  p.id, p.parent_id as parentId, p.resource_type as resourceType, p.permission_name as permissionName, p.url,p.sort_order as sortOrder, p.access_type as accessType, p.icon , p.resource_attribute as resourceAttribute, p.orig_id as origId from user_user u, user_r_user_role url1, user_role r, user_r_role_permission rp, user_permission p, user_r_application_permission rap where u.id=#{userId} and u.id=url1.user_id and url1.role_id=r.id and r.id=rp.role_id and rp.permission_id=p.id and p.tenant_id=#{tenantId} and p.id=rap.permission_id and rap.application_id=#{applicationId} and p.is_active=1 and u.delete_time=0 and r.delete_time=0 and p.delete_time=0")
    List<Permission> getRoleAssignedPermissionIdsByUserId(@Param("userId") Long userId, @Param("tenantId") String tenantId, @Param("applicationId")Long applicationId);

    @Select("select  p.id, p.parent_id as parentId, p.resource_type as resourceType, p.permission_name as permissionName, p.url,p.sort_order as sortOrder, p.access_type as accessType, p.icon , p.resource_attribute as resourceAttribute, p.orig_id as origId from user_user u, user_r_group_user ug, user_group g, user_r_group_permission gp, user_permission p, user_r_application_permission rap where u.id=#{userId} and u.id=ug.user_id and g.id= gp.group_id and p.id=gp.permission_id and p.tenant_id=#{tenantId} and p.id=rap.permission_id and rap.application_id=#{applicationId} and p.is_active=1 and u.delete_time=0 and p.delete_time=0 and g.delete_time=0")
    List<Permission> getGroupAssignedPermissionIdsByUserId(@Param("userId") Long userId, @Param("tenantId") String tenantId, @Param("applicationId")Long applicationId);
    
    @Select("select 	p.id, p.parent_id as parentId, p.resource_type as resourceType, p.permission_name as permissionName, p.url,p.sort_order as sortOrder, p.access_type as accessType, p.icon , p.resource_attribute as resourceAttribute, p.orig_id as origId from 	user_user u, user_r_group_user ug, user_group g, user_r_group_role gr, user_role r, user_r_role_permission rp, user_permission p, user_r_application_permission rap where 	u.id=#{userId} and u.id=ug.user_id and  g.id= ug.group_id and  g.id= gr.group_id and gr.role_id=r.id and r.id=rp.role_id and p.id=rp.permission_id and p.tenant_id=#{tenantId} and p.id=rap.permission_id and rap.application_id=#{applicationId} and p.is_active=1 and u.delete_time=0 and p.delete_time=0 and g.delete_time=0 and r.delete_time=0  ")
    List<Permission> getGroupRoleAssignedPermissionIdsByUserId(@Param("userId") Long userId, @Param("tenantId") String tenantId, 	@Param("applicationId") Long applicationId);

	List<Permission> getOrderSuitePermissionByUserId(@Param("params")Map<String, Object> params);

	Page<Permission> getPermissionByTenantId(String tenantId);

	@Override
	int insert(Permission entity);


	@Override
    int deleteById(Serializable id);


	 @Override
    int deleteByMap(@Param(Constants.COLUMN_MAP) Map<String, Object> columnMap);


	 @Override
    int delete(@Param(Constants.WRAPPER) Wrapper<Permission> queryWrapper);

     @Override
    int deleteBatchIds(@Param(Constants.COLLECTION) Collection<? extends Serializable> idList);


	 @Override
    int updateById(@Param(Constants.ENTITY) Permission entity);


	 @Override
    int update(@Param(Constants.ENTITY) Permission entity, @Param(Constants.WRAPPER) Wrapper<Permission> updateWrapper);


	 @Override
    Permission selectById(Serializable id);


	 @Override
    List<Permission> selectBatchIds(@Param(Constants.COLLECTION) Collection<? extends Serializable> idList);


	 @Override
    List<Permission> selectByMap(@Param(Constants.COLUMN_MAP) Map<String, Object> columnMap);


	 @Override
    Permission selectOne(@Param(Constants.WRAPPER) Wrapper<Permission> queryWrapper);


	 @Override
    Long selectCount(@Param(Constants.WRAPPER) Wrapper<Permission> queryWrapper);


	 @Override
    List<Permission> selectList(@Param(Constants.WRAPPER) Wrapper<Permission> queryWrapper);


	@Override
    List<Map<String, Object>> selectMaps(@Param(Constants.WRAPPER) Wrapper<Permission> queryWrapper);


	 @Override
    List<Object> selectObjs(@Param(Constants.WRAPPER) Wrapper<Permission> queryWrapper);


    Page<Permission> selectPage(Page<Permission> page, @Param(Constants.WRAPPER) Wrapper<Permission> queryWrapper);

    Page<Map<String, Object>> selectMapsPage(Page<Permission> page, @Param(Constants.WRAPPER) Wrapper<Permission> queryWrapper);

	List<PermissionDTO> getPermissionList(@Param("userId")Long userId, @Param("tenantId")String tenantId);

	@Insert("insert into user_r_user_permission values (#{userId},#{permissionId})")
	void createResourceAllocationToUser(@Param("userId") Long userId, @Param("permissionId") long permissionId);

	@Select("select id, permission_name as permissionName from user_permission where tenant_id=#{tenantId} and delete_time=0 and application_id=#{applicationId} and permission_name like concat(#{permissionName},'%')")
	List<Map<Long, String>> findPermissionsByPermissionNamePrefix(@Param("tenantId") String tenantId, @Param("applicationId") Long applicationId, @Param("permissionName") String permissionName);

	@Select("select p.id, p.parent_id as parentId, p.resource_type as resourceType, p.permission_name as permissionName, p.url ,p.sort_order as sortOrder, p.access_type as accessType, p.icon, p.resource_attribute as resourceAttribute  from user_permission p, user_r_application_tenant rat, user_r_application_tenant_permission ratp where rat.tenant_code=#{tenantId} and rat.application_id=#{applicationId} and rat.id = ratp.r_app_tenant_id and ratp.permission_id=p.id and p.is_active=1 and p.delete_time=0 and p.resource_attribute=1")
	Set<Permission> getDataPermissionTreeByTenantIdApplicationId(@Param("tenantId") String tenantId, @Param("applicationId") Long applicationId);

	@Insert("insert into user_r_group_permission values (#{groupId},#{permissionId})")
	void createResourceAllocationToGroup(@Param("groupId")Long groupId,@Param("permissionId")long permissionId);


	List<TreeModel> getTreeByApplicationId(@Param("tenantId")String tenantId,@Param("applicationId")Long applicationId);

	List<TreeModel> getTreeByApplicationId(@Param("tenantId")String tenantId,@Param("applicationId") Long applicationId,@Param("userId") Long userId);

	@Insert("insert into user_r_role_permission values (#{roleId},#{permissionId})")
	void createResourceAllocationToRole(@Param("roleId")Long roleId,@Param("permissionId") long parseLong);




	@Delete("delete from user_r_role_permission where role_id=#{roleId}")
	void deleteRRolePermission(@Param("roleId")Long roleId);

	@Delete("delete from user_r_user_permission where user_id=#{userId}")
	void deleteRUserPermission(@Param("userId")Long userId);


	List<TreeModel> getPermissionTreeByTenantId(@Param("tenantId")String tenantId,@Param("applicationId")Long applicationId,@Param("inSuiteVaild")Long inSuiteVaild);

	List<TreeModel> getAllMenuList(@Param("params")Map<String, Object> map);


	PermissionInfoVO getPermissionsById(String id);


	int updatePermission(Permission bean);


	void updateDeleteTimeById(@Param("array")String[] id);


	Permission selectByTenantIdAndPermissionName(@Param("tenantId") String tenantId, @Param("permissionName")String permissionName);


	void createPermission(Permission newperm);



	List<Permission> getOrderSuitePermissionByParam(@Param("params")Map<String, Object> params);

	List<Permission> selectPermissionByTenantId(@Param("params")Map<String, Object> params);


	

}
