package com.matariky.userservice.service;

import com.google.code.kaptcha.Producer;
import com.matariky.redis.RedisUtils;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Random;
import java.util.Base64;

import javax.imageio.ImageIO;

/**
 * Captcha service
 *
 */
@Service
public class CaptchaService {
    @Autowired
    private Producer producer;
    @Autowired
    private RedisUtils redisUtils;

    /**
     * Define image width
     */
    private static final int width = 90;
    /**
     * Define image height
     */
    private static final int height = 36;
    /**
     * Define the number of interference lines
     */
    private static final int count = 200;

    /**
     * The length of the interference line = 1.414 * lineWidth
     */
    private static final int lineWidth = 2;

    /**
     * Image format
     */
    private static final String IMG_FORMAT = "JPEG";

    /**
     * Base64 image prefix
     */
    private static final String BASE64_PRE = "data:image/jpg;base64,";

    /**
     * Generate base64 string
     * 
     * @param resultCode
     * @return
     * @throws IOException
     */
    public String generate(String resultCode) throws IOException {
        BufferedImage image = getImageBuffer(resultCode);

        ByteArrayOutputStream byteStream = new ByteArrayOutputStream();
        // Write to stream
        ImageIO.write(image, IMG_FORMAT, byteStream);
        // Convert to bytes
        byte[] bytes = byteStream.toByteArray();
        // Convert to base64 string
        String base64 = Base64.getEncoder().encodeToString(bytes).trim();
        base64 = base64.replaceAll("\n", "").replaceAll("\r", ""); // Remove \r\n

        // Write to specified location
        // ImageIO.write(bufferedImage, "png", new File(""));

        return BASE64_PRE + base64;
    }

    private BufferedImage getImageBuffer(String resultCode) {
        // Create image in memory
        final BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        // Get graphics context
        final Graphics2D graphics = (Graphics2D) image.getGraphics();
        // Set background color
        graphics.setColor(Color.WHITE); // ---1
        graphics.fillRect(0, 0, width, height);
        // Set border color
        // graphics.setColor(getRandColor(100, 200)); // ---2
        graphics.drawRect(0, 0, width - 1, height - 1);

        final Random random = new Random();
        // Randomly generate interference lines to make the captcha harder to detect by
        // other programs
        for (int i = 0; i < count; i++) {
            graphics.setColor(getRandColor(150, 200)); // ---3

            final int x = random.nextInt(width - lineWidth - 1) + 1; // Ensure it is drawn within the border
            final int y = random.nextInt(height - lineWidth - 1) + 1;
            final int xl = random.nextInt(lineWidth);
            final int yl = random.nextInt(lineWidth);
            graphics.drawLine(x, y, x + xl, y + yl);
        }
        // Get the randomly generated captcha
        for (int i = 0; i < resultCode.length(); i++) {
            // Display the captcha on the image, the color generated by calling the function
            // is the same, possibly because the seed is too close, so it can only be
            // generated directly
            // graphics.setColor(new Color(20 + random.nextInt(130), 20 + random
            // .nextInt(130), 20 + random.nextInt(130)));
            // Set font color
            graphics.setColor(Color.BLACK);
            // Set font style
            // graphics.setFont(new Font("Arial Black", Font.ITALIC, 18));
            graphics.setFont(new Font("Times New Roman", Font.BOLD, 24));
            // Set characters, character spacing, top margin
            graphics.drawString(String.valueOf(resultCode.charAt(i)), (23 * i) + 8, 26);
        }
        // Make the image effective
        graphics.dispose();
        return image;
    }

    private Color getRandColor(int fc, int bc) { // Get random color within the given range
        final Random random = new Random();
        if (fc > 255) {
            fc = 255;
        }
        if (bc > 255) {
            bc = 255;
        }

        final int r = fc + random.nextInt(bc - fc);
        final int g = fc + random.nextInt(bc - fc);
        final int b = fc + random.nextInt(bc - fc);

        return new Color(r, g, b);
    }

    public BufferedImage create(String uuid) {
        // Generate text captcha
        String code = producer.createText();

        // Save to cache
        setCache(uuid, code);

        return producer.createImage(code);
    }

    public boolean validate(String uuid, String code) {
        // Retrieve captcha
        String captcha = getCache(uuid);

        // Validation successful
        if (code.equalsIgnoreCase(captcha)) {
            return true;
        }

        return false;
    }

    private void setCache(String key, String value) {
        key = "sys:captcha:" + key;
        redisUtils.set(key, value, 300);
    }

    private String getCache(String key) {
        key = "sys:captcha:" + key;
        String captcha = (String) redisUtils.get(key);
        // Delete captcha
        if (captcha != null) {
            redisUtils.delete(key);
        }
        return captcha;
    }
}